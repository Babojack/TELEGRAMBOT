////////////////////////////////////////////////////////////
// bot.js ‚Äì –ú–Ω–æ–≥–æ-–≥—Ä—É–ø–ø–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞—É–Ω–¥–æ–≤
////////////////////////////////////////////////////////////

import 'dotenv/config';
import { Telegraf } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

////////////////////////////////////////////////////////////
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
////////////////////////////////////////////////////////////

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!");
  process.exit(1);
}

const ADMIN_ID = process.env.ADMIN_ID || null;

const bot = new Telegraf(BOT_TOKEN);

////////////////////////////////////////////////////////////
// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏ (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
////////////////////////////////////////////////////////////

let words = [];
try {
  const data = fs.readFileSync(path.join(__dirname, 'words.txt'), 'utf8');
  words = data
    .split(/\r?\n/)
    .filter(line => line.trim() !== '')
    .map(line => {
      const [rus, ger] = line.split(':');
      return {
        rus: rus.trim(),
        ger: ger.trim()
      };
    });
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ words.txt:", err);
  process.exit(1);
}

////////////////////////////////////////////////////////////
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
////////////////////////////////////////////////////////////

const pointsFile = path.join(__dirname, 'points.json');
let pointsData = {};
if (fs.existsSync(pointsFile)) {
  try {
    pointsData = JSON.parse(fs.readFileSync(pointsFile, 'utf8'));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ points.json:", err);
  }
}

function updateUserPoints(userId, username, pointsToAdd) {
  if (!pointsData[userId]) {
    pointsData[userId] = { username, points: 0 };
  }
  pointsData[userId].points += pointsToAdd;
  savePoints();
}

function savePoints() {
  fs.writeFileSync(pointsFile, JSON.stringify(pointsData, null, 2));
}

////////////////////////////////////////////////////////////
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä–∞)
////////////////////////////////////////////////////////////

const games = {}; // games[chatId] => { roundActive, currentWord, autoInterval, ... }

function ensureGame(chatId) {
  if (!games[chatId]) {
    games[chatId] = {
      roundActive: false,
      currentWord: null,
      currentParsedGer: null,
      firstGuesser: null,
      sentenceSubmissions: {},
      aufgabeClaimed: {},
      wordIndex: 0,
      autoInterval: null // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
    };
  }
  return games[chatId];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –∞—Ä—Ç–∏–∫–ª—è
function parseGermanWord(ger) {
  const lower = ger.toLowerCase();
  if (lower.startsWith('der ') || lower.startsWith('die ') || lower.startsWith('das ')) {
    const [article, ...rest] = ger.split(/\s+/);
    const root = rest.join(' ');
    return { hasArticle: true, article, root };
  } else {
    return { hasArticle: false, article: null, root: ger };
  }
}

////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ (—É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
////////////////////////////////////////////////////////////

function normalize(str) {
  return str.trim().replace(/\s+/g, ' ').toLowerCase();
}

////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ
////////////////////////////////////////////////////////////

function autoStartGame(chatId) {
  const game = ensureGame(chatId);

  // –ï—Å–ª–∏ —Ä–∞—É–Ω–¥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–ª–æ–≤–∞
  if (game.roundActive) {
    bot.telegram.sendMessage(chatId, "–í—Ä–µ–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É.");
  }

  if (game.wordIndex >= words.length) {
    game.wordIndex = 0;
  }

  game.currentWord = words[game.wordIndex];
  game.wordIndex++;
  game.currentParsedGer = parseGermanWord(game.currentWord.ger);

  game.roundActive = true;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
  bot.telegram.sendMessage(
    chatId,
    "–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ!\n\n" +
    "–í —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 24 —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. " +
    "–ü–µ—Ä–≤—ã–π, –∫—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç —Å–ª–æ–≤–æ, –ø–æ–ª—É—á–∏—Ç +1 –±–∞–ª–ª, –∞ –∑–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äì +2 –±–∞–ª–ª–∞.\n\n" +
    "–£–¥–∞—á–∏!"
  );

  bot.telegram.sendMessage(
    chatId,
    `‚ö°Ô∏è *–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥!*\n` +
    `üìù –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: *${game.currentWord.rus}*\n` +
    `\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π! üöÄ`,
    { parse_mode: 'Markdown' }
  );
}

////////////////////////////////////////////////////////////
// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
////////////////////////////////////////////////////////////

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã. –ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ /startgame –≤ –≥—Ä—É–ø–ø–µ, –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
// –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑ –≤ —á–∞—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.
bot.command('startgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (ADMIN_ID && ctx.from.id.toString() !== ADMIN_ID.toString()) {
    ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É.");
    return;
  }

  // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
  if (game.wordIndex >= words.length) {
    game.wordIndex = 0;
  }
  game.currentWord = words[game.wordIndex];
  game.wordIndex++;
  game.currentParsedGer = parseGermanWord(game.currentWord.ger);

  game.roundActive = true;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  ctx.reply(
    "–í —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 24 —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞. " +
    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –¥–∞—ë—Ç +1 –±–∞–ª–ª, –∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äì +2 –±–∞–ª–ª–∞. " +
    "–ü—Ä–∏ –≤–≤–æ–¥–µ 'Aufgabe+' –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +3 –±–∞–ª–ª–∞.\n\n" +
    "–£–¥–∞—á–∏!"
  );

  ctx.reply(
    `‚ö°Ô∏è *–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥!*\n` +
    `üìù –°–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: *${game.currentWord.rus}*\n` +
    `\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π! üöÄ`,
    { parse_mode: 'Markdown' }
  );

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
  game.autoInterval = setInterval(() => {
    autoStartGame(chatId);
  }, 60 * 60 * 1000);
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä)
bot.command('endgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (ADMIN_ID && ctx.from.id.toString() !== ADMIN_ID.toString()) {
    ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–≥—Ä—É.");
    return;
  }

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.roundActive = false;
  game.currentWord = null;
  game.currentParsedGer = null;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  ctx.reply("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞
bot.command('score', (ctx) => {
  const userId = ctx.from.id;
  const userData = pointsData[userId];
  const score = userData ? userData.points : 0;
  ctx.reply(`${ctx.from.first_name}, —Ç–≤–æ–π —Å—á—ë—Ç: ${score}`);
});

// –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –±–∞–ª–ª–æ–≤
bot.command('scoreall', (ctx) => {
  if (Object.keys(pointsData).length === 0) {
    ctx.reply("–ü–æ–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–µ—Ç.");
    return;
  }
  let result = "üìä *–°—á—ë—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n";
  const sorted = Object.entries(pointsData).sort((a, b) => b[1].points - a[1].points);
  sorted.forEach(([id, data], idx) => {
    result += `${idx + 1}. ${data.username}: ${data.points} –±–∞–ª–ª–æ–≤\n`;
  });
  ctx.reply(result, { parse_mode: 'Markdown' });
});

bot.command('leaderboard', (ctx) => {
  if (Object.keys(pointsData).length === 0) {
    ctx.reply("–ü–æ–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–µ—Ç.");
    return;
  }
  let leaderboard = "üèÜ *–õ–∏–¥–µ—Ä–±–æ—Ä–¥:*\n\n";
  const sorted = Object.entries(pointsData).sort((a, b) => b[1].points - a[1].points);
  sorted.forEach(([id, data], idx) => {
    leaderboard += `${idx + 1}. ${data.username}: ${data.points} –±–∞–ª–ª–æ–≤\n`;
  });
  ctx.reply(leaderboard, { parse_mode: 'Markdown' });
});

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã: —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä
bot.command('restartgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (ADMIN_ID && ctx.from.id.toString() !== ADMIN_ID.toString()) {
    ctx.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É.");
    return;
  }

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.roundActive = false;
  game.currentWord = null;
  game.currentParsedGer = null;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};
  game.wordIndex = 0;

  ctx.reply("–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ (–±–∞–ª–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è). –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame.");
});

////////////////////////////////////////////////////////////
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äì –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
////////////////////////////////////////////////////////////

bot.on('text', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
  if (!game.roundActive) return;

  const text = ctx.message.text;
  const userId = ctx.from.id;
  const username = ctx.from.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

  // 1) –ö–æ–º–∞–Ω–¥–∞ "Aufgabe+"
  if (text.trim() === "Aufgabe+") {
    if (!game.aufgabeClaimed[userId]) {
      updateUserPoints(userId, username, 3);
      game.aufgabeClaimed[userId] = true;
      ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +3 –±–∞–ª–ª–∞ –∑–∞ Aufgabe+. üî•`);
    }
    return;
  }

  // 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞
  if (!game.firstGuesser) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º normalize() –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
    let userGuess = normalize(text);
    if (game.currentParsedGer?.hasArticle) {
      // –û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è
      const expected = normalize(`${game.currentParsedGer.article} ${game.currentParsedGer.root}`);
      if (userGuess === expected) {
        game.firstGuesser = { userId, username };
        updateUserPoints(userId, username, 1);
        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–µ—Ä–≤—ã–π –∏ –ø–æ–ª—É—á–∞–µ—à—å +1 –±–∞–ª–ª.`);
        return;
      } else {
        ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫–ª—å (der, die, das).");
        return;
      }
    } else {
      const expected = normalize(game.currentParsedGer.root);
      if (userGuess === expected) {
        game.firstGuesser = { userId, username };
        updateUserPoints(userId, username, 1);
        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–µ—Ä–≤—ã–π –∏ –ø–æ–ª—É—á–∞–µ—à—å +1 –±–∞–ª–ª.`);
        return;
      } else {
        ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ?");
        return;
      }
    }
  } else {
    // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ —É–≥–∞–¥–∞–Ω–æ, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    let userGuess = normalize(text);
    let expected;
    if (game.currentParsedGer?.hasArticle) {
      expected = normalize(`${game.currentParsedGer.article} ${game.currentParsedGer.root}`);
    } else {
      expected = normalize(game.currentParsedGer.root || "");
    }
    if (userGuess === expected) {
      ctx.reply(`–£–≤—ã, ${game.firstGuesser.username} —É–∂–µ —É–≥–∞–¥–∞–ª –ø–µ—Ä–≤—ã–º! üòâ`);
      return;
    }
  }

  // 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤ –∏ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞)
  if (game.sentenceSubmissions[userId]) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    return;
  }

  const wordsInMessage = text.split(/\s+/).filter(w => w.length > 0);
  if (wordsInMessage.length < 5) {
    ctx.reply("–¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤!");
    return;
  }

  const userSentenceLower = text.toLowerCase(); // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π toLowerCase(), —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—â–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
  const rootLower = game.currentParsedGer?.root.toLowerCase() || "";
  if (!userSentenceLower.includes(rootLower)) {
    ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ?");
    return;
  }

  // –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞—á–∏—Å–ª—è–µ–º +2 –±–∞–ª–ª–∞
  game.sentenceSubmissions[userId] = true;
  updateUserPoints(userId, username, 2);
  ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +2 –±–∞–ª–ª–∞ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.`);
});

////////////////////////////////////////////////////////////
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
////////////////////////////////////////////////////////////

bot.launch();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
