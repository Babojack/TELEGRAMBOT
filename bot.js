////////////////////////////////////////////////////////////
// bot.js ‚Äì –ú–Ω–æ–≥–æ-–≥—Ä—É–ø–ø–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞—É–Ω–¥–æ–≤
////////////////////////////////////////////////////////////

import 'dotenv/config';
import { Telegraf } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

////////////////////////////////////////////////////////////
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
////////////////////////////////////////////////////////////

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

////////////////////////////////////////////////////////////
// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏ (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
////////////////////////////////////////////////////////////

let words = [];
try {
  const data = fs.readFileSync(path.join(__dirname, 'words.txt'), 'utf8');
  words = data
    .split(/\r?\n/)
    .filter(line => line.trim() !== '')
    .map(line => {
      const [rus, ger] = line.split(':');
      return { rus: rus.trim(), ger: ger.trim() };
    });
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ words.txt:", err);
  process.exit(1);
}

////////////////////////////////////////////////////////////
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã ‚Äì —Ç–µ–ø–µ—Ä—å gruppenspezifisch
// Struktur: { chatId: { userId: { username, points } } }
////////////////////////////////////////////////////////////

const pointsFile = path.join(__dirname, 'points.json');
let pointsData = {};
if (fs.existsSync(pointsFile)) {
  try {
    pointsData = JSON.parse(fs.readFileSync(pointsFile, 'utf8'));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ points.json:", err);
  }
}

function updateUserPoints(chatId, userId, username, pointsToAdd) {
  if (!pointsData[chatId]) {
    pointsData[chatId] = {};
  }
  if (!pointsData[chatId][userId]) {
    pointsData[chatId][userId] = { username, points: 0 };
  }
  pointsData[chatId][userId].points += pointsToAdd;
  savePoints();
}

function savePoints() {
  fs.writeFileSync(pointsFile, JSON.stringify(pointsData, null, 2));
}

////////////////////////////////////////////////////////////
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (—Å –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä–æ–º)
////////////////////////////////////////////////////////////

const games = {}; // games[chatId] => { roundActive, currentWord, autoInterval, ... }

function ensureGame(chatId) {
  if (!games[chatId]) {
    games[chatId] = {
      roundActive: false,
      currentWord: null,
      currentParsedGer: null,
      firstGuesser: null,
      sentenceSubmissions: {},
      aufgabeClaimed: {},
      wordIndex: 0,
      autoInterval: null, // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–æ–≤
      rulesShown: false
    };
  }
  return games[chatId];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –∞—Ä—Ç–∏–∫–ª—è
function parseGermanWord(ger) {
  const lower = ger.toLowerCase();
  if (lower.startsWith('der ') || lower.startsWith('die ') || lower.startsWith('das ')) {
    const [article, ...rest] = ger.split(/\s+/);
    const root = rest.join(' ');
    return { hasArticle: true, article, root };
  } else {
    return { hasArticle: false, article: null, root: ger };
  }
}

////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ (—É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
////////////////////////////////////////////////////////////

function normalize(str) {
  return str.trim().replace(/\s+/g, ' ').toLowerCase();
}

////////////////////////////////////////////////////////////
// –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª (–±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã)
////////////////////////////////////////////////////////////

const RULES_TEXT = `So ihr Lieben! In den n√§chsten 24 Stunden bekommt ihr 24 W√∂rter, die ihr heute lernen werdet. Aber ihr k√∂nnt dabei auch Punkte sammeln.

1Ô∏è‚É£ Der Erste, der das Wort richtig √ºbersetzt, bekommt +1 Punkt.
2Ô∏è‚É£ Danach k√∂nnt ihr ‚Äì alle unabh√§ngig voneinander ‚Äì einen richtigen Satz mit dem Wort bilden und daf√ºr +2 Punkte bekommen.
3Ô∏è‚É£ Wenn ihr 'Aufgabe+' schreibt, bekommt ihr +3 Punkte (daf√ºr m√ºsst ihr das Wort 4x in echten Gespr√§chen und 4x schriftlich (WhatsApp, Telegram etc. benutzen!).

üìå WICHTIG: Beim Schreiben eurer S√§tze bitte auf die Grammatik achten!
Hier sind ein paar goldene Regeln, die euch helfen:

üìö DIE GOLDENEN GRAMMATIK-REGELN:
‚û§ Immer den richtigen Artikel benutzen! Beispiel:
   ‚úò Haus (falsch!)
   ‚úîÔ∏è das Haus (richtig!)

‚û§ Manche Pr√§positionen verlangen bestimmte F√§lle:
   ‚Ä¢ mit ‚Üí Dativ ‚Üí z. B. ‚Äûmit dem Auto‚Äú, ‚Äûmit der Sonne‚Äú
   ‚Ä¢ f√ºr ‚Üí Akkusativ ‚Üí z. B. ‚Äûf√ºr das Kind‚Äú, ‚Äûf√ºr die Katze‚Äú
   ‚Ä¢ von ‚Üí Dativ ‚Üí ‚Äûvon dem Mann‚Äú, ‚Äûvon der Frau‚Äú
   ‚Ä¢ ohne ‚Üí Akkusativ ‚Üí ‚Äûohne einen Plan‚Äú, ‚Äûohne die Jacke‚Äú

‚û§ Ein Satz sollte mindestens 5 W√∂rter haben!
   ‚úò 'Ich liebe Haus' (zu kurz & grammatikalisch falsch)
   ‚úîÔ∏è 'Ich liebe das Haus in unserer Stra√üe.'

‚û§ Gro√üschreibung! Alle Nomen im Deutschen schreibt man gro√ü:
   ‚úîÔ∏è ‚ÄûIch habe einen Hund.‚Äú (nicht: ‚Äûeinen hund‚Äú)

üß† Denk dran: Dein Ziel ist nicht nur Punkte zu sammeln ‚Äì sondern am Ende richtiges, echtes Deutsch zu sprechen üí™

Viel Erfolg und viel Spa√ü beim Deutschlernen! üá©üá™‚ú®`;

////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ ‚Äì –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
////////////////////////////////////////////////////////////

async function autoStartGame(chatId) {
  const game = ensureGame(chatId);
  console.log("autoStartGame f√ºr Chat:", chatId);

  // Wenn der alte Durchlauf aktiv war, zuerst "Die Zeit ist leider abgelaufen." senden, dann kurz warten
  if (game.roundActive) {
    await bot.telegram.sendMessage(chatId, "Die Zeit ist leider abgelaufen.");
    await new Promise(resolve => setTimeout(resolve, 2000)); // 2000 ms Verz√∂gerung
  }

  // Neues zuf√§lliges Wort w√§hlen
  game.currentWord = words[Math.floor(Math.random() * words.length)];
  game.currentParsedGer = parseGermanWord(game.currentWord.ger);

  game.roundActive = true;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  await bot.telegram.sendMessage(
    chatId,
    `Hier ist ein neues Wort: *${game.currentWord.rus}*\n\n` +
      `/regeln - um die Regeln zu lesen\n` +
      `/score - um Deinen Score zu sehen`,
    { parse_mode: 'Markdown' }
  );
}

////////////////////////////////////////////////////////////
// Bot-Kommandos
////////////////////////////////////////////////////////////

// /startgame ‚Äì Spiel starten und Regeln anzeigen
bot.command('startgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  // Zuf√§lliges Wort w√§hlen
  game.currentWord = words[Math.floor(Math.random() * words.length)];
  game.currentParsedGer = parseGermanWord(game.currentWord.ger);

  game.roundActive = true;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};
  game.rulesShown = false;

  // Regeln anzeigen
  ctx.reply(RULES_TEXT, { parse_mode: 'Markdown' });
  ctx.reply(
    `‚ö°Ô∏è *Neuer Rund!*\n` +
      `üìù Wort auf Russisch: *${game.currentWord.rus}*\n` +
      `\nBitte √ºbersetze das Wort ins Deutsche! üöÄ`,
    { parse_mode: 'Markdown' }
  );
  game.rulesShown = true;

  // Timer f√ºr den automatischen Rundenwechsel (z. B. alle 5 Minuten)
  game.autoInterval = setInterval(() => {
    autoStartGame(chatId);
  }, 5 * 60 * 1000);
});

// /endgame ‚Äì Spiel beenden
bot.command('endgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.roundActive = false;
  game.currentWord = null;
  game.currentParsedGer = null;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  ctx.reply("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
});

// /score ‚Äì pers√∂nlicher Punktestand
bot.command('score', (ctx) => {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  const groupScores = pointsData[chatId] || {};
  const userData = groupScores[userId];
  const score = userData ? userData.points : 0;
  ctx.reply(`${ctx.from.first_name}, —Ç–≤–æ–π —Å—á—ë—Ç: ${score}`);
});

// /scoreall ‚Äì Gesamtpunktestand im Chat
bot.command('scoreall', (ctx) => {
  const chatId = ctx.chat.id;
  const groupScores = pointsData[chatId] || {};
  if (Object.keys(groupScores).length === 0) {
    ctx.reply("–ü–æ–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–µ—Ç.");
    return;
  }
  let result = "üìä *–°—á—ë—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n";
  const sorted = Object.entries(groupScores).sort((a, b) => b[1].points - a[1].points);
  sorted.forEach(([id, data], idx) => {
    result += `${idx + 1}. ${data.username}: ${data.points} –±–∞–ª–ª–æ–≤\n`;
  });
  ctx.reply(result, { parse_mode: 'Markdown' });
});

// /leaderboard ‚Äì Leaderboard anzeigen
bot.command('leaderboard', (ctx) => {
  const chatId = ctx.chat.id;
  const groupScores = pointsData[chatId] || {};
  if (Object.keys(groupScores).length === 0) {
    ctx.reply("–ü–æ–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–µ—Ç.");
    return;
  }
  let leaderboard = "üèÜ *–õ–∏–¥–µ—Ä–±–æ—Ä–¥:*\n\n";
  const sorted = Object.entries(groupScores).sort((a, b) => b[1].points - a[1].points);
  sorted.forEach(([id, data], idx) => {
    leaderboard += `${idx + 1}. ${data.username}: ${data.points} –±–∞–ª–ª–æ–≤\n`;
  });
  ctx.reply(leaderboard, { parse_mode: 'Markdown' });
});

// /regeln ‚Äì Regeln (auf Deutsch) anzeigen
bot.command('regeln', (ctx) => {
  ctx.reply(RULES_TEXT, { parse_mode: 'Markdown' });
});

// /rules ‚Äì Alternative Kommandovariante f√ºr Regeln anzeigen
bot.command('rules', (ctx) => {
  ctx.reply(RULES_TEXT, { parse_mode: 'Markdown' });
});

// /resetscoreall ‚Äì Punkte in der Gruppe zur√ºcksetzen
bot.command('resetscoreall', (ctx) => {
  const chatId = ctx.chat.id;
  pointsData[chatId] = {};
  savePoints();
  ctx.reply("Alle Punkte in dieser Gruppe wurden zur√ºckgesetzt.");
});

// /restartgame ‚Äì Spiel neu starten (Punkte bleiben erhalten)
bot.command('restartgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.roundActive = false;
  game.currentWord = null;
  game.currentParsedGer = null;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};
  game.wordIndex = 0;

  ctx.reply("–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ (–±–∞–ª–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è). –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame.");
});

////////////////////////////////////////////////////////////
// Verarbeitung von Nachrichten ‚Äì Spiel-Logik
////////////////////////////////////////////////////////////

bot.on('text', (ctx) => {
  const text = ctx.message.text;
  // Nachrichten ignorieren, die Russisch oder nur aus Emojis bestehen
  const cyrillicRegex = /[–∞-—è—ë]/i;
  const emojiRegex = /^[\p{Emoji}\s]+$/u;
  if (cyrillicRegex.test(text) || emojiRegex.test(text)) {
    return;
  }
  
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (!game.roundActive) return;

  const userId = ctx.from.id;
  const username = ctx.from.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

  // 1) Verarbeitung von "Aufgabe+"
  if (text.trim() === "Aufgabe+") {
    if (!game.aufgabeClaimed[userId]) {
      updateUserPoints(chatId, userId, username, 3);
      game.aufgabeClaimed[userId] = true;
      ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +3 –±–∞–ª–ª–∞ –∑–∞ Aufgabe+. üî•`);
    }
    return;
  }

  // 2) √úberpr√ºfung der √úbersetzung (1 Punkt)
  if (!game.firstGuesser) {
    let userGuess = normalize(text);
    if (game.currentParsedGer?.hasArticle) {
      const expected = normalize(`${game.currentParsedGer.article} ${game.currentParsedGer.root}`);
      if (userGuess === expected) {
        game.firstGuesser = { userId, username };
        updateUserPoints(chatId, userId, username, 1);
        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–µ—Ä–≤—ã–π und bekommst +1 –±–∞–ª–ª.`);
        return;
      } else {
        ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫–ª—å (der, die, das).");
        return;
      }
    } else {
      const expected = normalize(game.currentParsedGer.root);
      if (userGuess === expected) {
        game.firstGuesser = { userId, username };
        updateUserPoints(chatId, userId, username, 1);
        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–µ—Ä–≤—ã–π und bekommst +1 –±–∞–ª–ª.`);
        return;
      } else {
        ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ?");
        return;
      }
    }
  } else {
    let userGuess = normalize(text);
    let expected;
    if (game.currentParsedGer?.hasArticle) {
      expected = normalize(`${game.currentParsedGer.article} ${game.currentParsedGer.root}`);
    } else {
      expected = normalize(game.currentParsedGer.root || "");
    }
    if (userGuess === expected) {
      ctx.reply(`–£–≤—ã, ${game.firstGuesser.username} —É–∂–µ —É–≥–∞–¥–∞–ª –ø–µ—Ä–≤—ã–º! üòâ`);
      return;
    }
  }

  // 3) √úberpr√ºfung des Satzes (mindestens 5 W√∂rter + das Wort muss enthalten sein) => +2 Punkte
  if (game.sentenceSubmissions[userId]) return;

  const wordsInMessage = text.split(/\s+/).filter(w => w.length > 0);
  if (wordsInMessage.length < 5) {
    ctx.reply("–¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤!");
    return;
  }

  const userSentenceLower = text.toLowerCase();
  const rootLower = (game.currentParsedGer?.root || "").toLowerCase();
  if (!userSentenceLower.includes(rootLower)) {
    ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ?");
    return;
  }

  game.sentenceSubmissions[userId] = true;
  updateUserPoints(chatId, userId, username, 2);
  ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +2 –±–∞–ª–ª–∞ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.`);
});

////////////////////////////////////////////////////////////
// Bot starten im Polling-Modus (f√ºr Render Background Worker)
////////////////////////////////////////////////////////////

(async () => {
  // Webhook l√∂schen, um Konflikte zu vermeiden
  await bot.telegram.deleteWebhook();
  await bot.launch();
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
