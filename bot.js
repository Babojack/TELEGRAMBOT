////////////////////////////////////////////////////////////
// bot.js ‚Äì –ú–Ω–æ–≥–æ-–≥—Ä—É–ø–ø–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞—É–Ω–¥–æ–≤
////////////////////////////////////////////////////////////

import 'dotenv/config';
import { Telegraf } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

////////////////////////////////////////////////////////////
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
////////////////////////////////////////////////////////////

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

////////////////////////////////////////////////////////////
// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏ (–æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø)
////////////////////////////////////////////////////////////

let words = [];
try {
  const data = fs.readFileSync(path.join(__dirname, 'words.txt'), 'utf8');
  words = data
    .split(/\r?\n/)
    .filter(line => line.trim() !== '')
    .map(line => {
      const [rus, ger] = line.split(':');
      return { rus: rus.trim(), ger: ger.trim() };
    });
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ words.txt:", err);
  process.exit(1);
}

////////////////////////////////////////////////////////////
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã ‚Äì —Ç–µ–ø–µ—Ä—å gruppenspezifisch
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { chatId: { userId: { username, points } } }
////////////////////////////////////////////////////////////

const pointsFile = path.join(__dirname, 'points.json');
let pointsData = {};
if (fs.existsSync(pointsFile)) {
  try {
    pointsData = JSON.parse(fs.readFileSync(pointsFile, 'utf8'));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ points.json:", err);
  }
}

function updateUserPoints(chatId, userId, username, pointsToAdd) {
  if (!pointsData[chatId]) {
    pointsData[chatId] = {};
  }
  if (!pointsData[chatId][userId]) {
    pointsData[chatId][userId] = { username, points: 0 };
  }
  pointsData[chatId][userId].points += pointsToAdd;
  savePoints();
}

function savePoints() {
  fs.writeFileSync(pointsFile, JSON.stringify(pointsData, null, 2));
}

////////////////////////////////////////////////////////////
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (—Å –∞–≤—Ç–æ-—Ç–∞–π–º–µ—Ä–æ–º)
////////////////////////////////////////////////////////////

const games = {}; // games[chatId] => { roundActive, currentWord, autoInterval, ... }

function ensureGame(chatId) {
  if (!games[chatId]) {
    games[chatId] = {
      roundActive: false,
      currentWord: null,
      currentParsedGer: null,
      firstGuesser: null,
      sentenceSubmissions: {},
      aufgabeClaimed: {},
      wordIndex: 0,
      autoInterval: null, // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–æ–≤
      rulesShown: false
    };
  }
  return games[chatId];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –∞—Ä—Ç–∏–∫–ª—è
function parseGermanWord(ger) {
  const lower = ger.toLowerCase();
  if (lower.startsWith('der ') || lower.startsWith('die ') || lower.startsWith('das ')) {
    const [article, ...rest] = ger.split(/\s+/);
    const root = rest.join(' ');
    return { hasArticle: true, article, root };
  } else {
    return { hasArticle: false, article: null, root: ger };
  }
}

////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ (—É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
////////////////////////////////////////////////////////////

function normalize(str) {
  return str.trim().replace(/\s+/g, ' ').toLowerCase();
}

////////////////////////////////////////////////////////////
// –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª (–Ω–µ–º–µ—Ü–∫–∏–π) ‚Äì –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
////////////////////////////////////////////////////////////

const RULES_TEXT = `
1Ô∏è‚É£ Der Erste, der das Wort richtig √ºbersetzt, bekommt +1 Punkt.
2Ô∏è‚É£ Danach k√∂nnt ihr ‚Äì alle unabh√§ngig voneinander ‚Äì einen richtigen Satz mit dem Wort bilden und daf√ºr +2 Punkte bekommen.
3Ô∏è‚É£ Wenn ihr 'Aufgabe+' schreibt, bekommt ihr +3 Punkte (daf√ºr m√ºsst ihr das Wort 4x in echten Gespr√§chen und 4x schriftlich (WhatsApp, Telegram etc. benutzen)!

üìå WICHTIG: Beim Schreiben eurer S√§tze bitte auf die Grammatik achten!
Hier sind ein paar goldene Regeln, die euch helfen:

üìö DIE GOLDENEN GRAMMATIK-REGELN:
‚û§ Immer den richtigen Artikel benutzen! Beispiel:
   ‚úò Haus (falsch!)
   ‚úîÔ∏è das Haus (richtig!)

‚û§ Manche Pr√§positionen verlangen bestimmte F√§lle:
   ‚Ä¢ mit ‚Üí Dativ ‚Üí z. B. ‚Äûmit dem Auto‚Äú, ‚Äûmit der Sonne‚Äú
   ‚Ä¢ f√ºr ‚Üí Akkusativ ‚Üí z. B. ‚Äûf√ºr das Kind‚Äú, ‚Äûf√ºr die Katze‚Äú
   ‚Ä¢ von ‚Üí Dativ ‚Üí ‚Äûvon dem Mann‚Äú, ‚Äûvon der Frau‚Äú
   ‚Ä¢ ohne ‚Üí Akkusativ ‚Üí ‚Äûohne einen Plan‚Äú, ‚Äûohne die Jacke‚Äú

‚û§ Ein Satz sollte mindestens 5 W√∂rter haben!
   ‚úò 'Ich liebe Haus' (zu kurz & grammatikalisch falsch)
   ‚úîÔ∏è 'Ich liebe das Haus in unserer Stra√üe.'

‚û§ Gro√üschreibung! Alle Nomen im Deutschen schreibt man gro√ü:
   ‚úîÔ∏è ‚ÄûIch habe einen Hund.‚Äú (nicht: ‚Äûeinen hund‚Äú)

üß† Denk dran: Dein Ziel ist nicht nur Punkte zu sammeln ‚Äì sondern am Ende richtiges, echtes Deutsch zu sprechen üí™

Viel Erfolg und viel Spa√ü beim Deutschlernen! üá©üá™‚ú®`;

////////////////////////////////////////////////////////////
// –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª (—Ä—É—Å—Å–∫–∏–π) ‚Äì –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∞–≤–∏–ª
////////////////////////////////////////////////////////////

const RULES_TEXT_RU = `–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! –í —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 24 —á–∞—Å–æ–≤ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 24 —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è. –ù–æ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∫–∏.

1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π, –∫—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç —Å–ª–æ–≤–æ, –ø–æ–ª—É—á–∞–µ—Ç +3 –±–∞–ª–ª–∞.
2Ô∏è‚É£ –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å –º–æ–∂–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º –∏ –ø–æ–ª—É—á–∏—Ç +2 –±–∞–ª–ª–∞.
3Ô∏è‚É£ –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ "Aufgabe+", –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +3 –±–∞–ª–ª–∞ (–¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 4 —Ä–∞–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö –∏ 4 —Ä–∞–∑–∞ –ø–∏—Å—å–º–µ–Ω–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ WhatsApp –∏–ª–∏ Telegram).

üìå –í–ê–ñ–ù–û: –ü—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É!
–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–æ–ª–æ—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–º–æ–≥—É—Ç:

üìö –ó–û–õ–û–¢–´–ï –ü–†–ê–í–ò–õ–ê –ì–†–ê–ú–ú–ê–¢–ò–ö–ò:
‚û§ –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å! –ü—Ä–∏–º–µ—Ä:
   ‚úò Haus (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)
   ‚úîÔ∏è das Haus (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)

‚û§ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–æ–≥–∏ —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞:
   ‚Ä¢ mit ‚Üí –¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä, "mit dem Auto", "mit der Sonne"
   ‚Ä¢ f√ºr ‚Üí –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä, "f√ºr das Kind", "f√ºr die Katze"
   ‚Ä¢ von ‚Üí –¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä, "von dem Mann", "von der Frau"
   ‚Ä¢ ohne ‚Üí –≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, –Ω–∞–ø—Ä–∏–º–µ—Ä, "ohne einen Plan", "ohne die Jacke"

‚û§ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∏–∑ 5 —Å–ª–æ–≤!
   ‚úò "Ich liebe Haus" (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ)
   ‚úîÔ∏è "Ich liebe das Haus in unserer Stra√üe."

‚û§ –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ: –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ –ø–∏—à—É—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
   ‚úîÔ∏è "Ich habe einen Hund." (–Ω–µ: "einen hund")

üß† –ü–æ–º–Ω–∏—Ç–µ: –í–∞—à–∞ —Ü–µ–ª—å –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–±–∏—Ä–∞—Ç—å –æ—á–∫–∏, –Ω–æ –∏ –≤ –∫–æ–Ω–µ—á–Ω–æ–º –∏—Ç–æ–≥–µ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ üí™

–ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üá©üá™‚ú®`;

////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ ‚Äì –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
////////////////////////////////////////////////////////////

async function autoStartGame(chatId) {
  const game = ensureGame(chatId);
  console.log("autoStartGame –¥–ª—è Chat:", chatId);

  // –ï—Å–ª–∏ —Ä–∞—É–Ω–¥ –∞–∫—Ç–∏–≤–µ–Ω ‚Äì —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏, –∑–∞—Ç–µ–º –∂–¥–µ–º
  if (game.roundActive) {
    await bot.telegram.sendMessage(chatId, "Die Zeit ist leider abgelaufen.");
    await new Promise(resolve => setTimeout(resolve, 2000)); // 2000 –º—Å –∑–∞–¥–µ—Ä–∂–∫–∏
  }

  // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
  game.currentWord = words[Math.floor(Math.random() * words.length)];
  game.currentParsedGer = parseGermanWord(game.currentWord.ger);

  game.roundActive = true;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  await bot.telegram.sendMessage(
    chatId,
    `Hier ist ein neues Wort: *${game.currentWord.rus}*\n\n` +
      `/rules - um die Regeln zu lesen\n` +
      `/rulesru - um Regeln auf russisch zu lesen\n` +
      `/score - um Deinen Score zu sehen`,
    { parse_mode: 'Markdown' }
  );
}

////////////////////////////////////////////////////////////
// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
////////////////////////////////////////////////////////////

// /startgame ‚Äì –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∏ –≤—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª (–Ω–µ–º–µ—Ü–∫–∏–µ)
bot.command('startgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.currentWord = words[Math.floor(Math.random() * words.length)];
  game.currentParsedGer = parseGermanWord(game.currentWord.ger);

  game.roundActive = true;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};
  game.rulesShown = false;

  ctx.reply(RULES_TEXT, { parse_mode: 'Markdown' });
  ctx.reply(
    `‚ö°Ô∏è *Neuer Rund!*\n` +
      `üìù Wort auf Russisch: *${game.currentWord.rus}*\n` +
      `\nBitte √ºbersetze das Wort ins Deutsche! üöÄ`,
    { parse_mode: 'Markdown' }
  );
  game.rulesShown = true;

  game.autoInterval = setInterval(() => {
    autoStartGame(chatId);
  }, 5 * 60 * 1000);
});

// /endgame ‚Äì –∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
bot.command('endgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.roundActive = false;
  game.currentWord = null;
  game.currentParsedGer = null;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};

  ctx.reply("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
});

// /score ‚Äì –≤—ã–≤–æ–¥ –ª–∏—á–Ω–æ–≥–æ —Å—á—ë—Ç–∞
bot.command('score', (ctx) => {
  const chatId = ctx.chat.id;
  const userId = ctx.from.id;
  const groupScores = pointsData[chatId] || {};
  const userData = groupScores[userId];
  const score = userData ? userData.points : 0;
  ctx.reply(`${ctx.from.first_name}, —Ç–≤–æ–π —Å—á—ë—Ç: ${score}`);
});

// /scoreall ‚Äì –≤—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –±–∞–ª–ª–æ–≤
bot.command('scoreall', (ctx) => {
  const chatId = ctx.chat.id;
  const groupScores = pointsData[chatId] || {};
  if (Object.keys(groupScores).length === 0) {
    ctx.reply("–ü–æ–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–µ—Ç.");
    return;
  }
  let result = "üìä *–°—á—ë—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n";
  const sorted = Object.entries(groupScores).sort((a, b) => b[1].points - a[1].points);
  sorted.forEach(([id, data], idx) => {
    result += `${idx + 1}. ${data.username}: ${data.points} –±–∞–ª–ª–æ–≤\n`;
  });
  ctx.reply(result, { parse_mode: 'Markdown' });
});

// /leaderboard ‚Äì –≤—ã–≤–æ–¥ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
bot.command('leaderboard', (ctx) => {
  const chatId = ctx.chat.id;
  const groupScores = pointsData[chatId] || {};
  if (Object.keys(groupScores).length === 0) {
    ctx.reply("–ü–æ–∫–∞ –±–∞–ª–ª–æ–≤ –Ω–µ—Ç.");
    return;
  }
  let leaderboard = "üèÜ *–õ–∏–¥–µ—Ä–±–æ—Ä–¥:*\n\n";
  const sorted = Object.entries(groupScores).sort((a, b) => b[1].points - a[1].points);
  sorted.forEach(([id, data], idx) => {
    leaderboard += `${idx + 1}. ${data.username}: ${data.points} –±–∞–ª–ª–æ–≤\n`;
  });
  ctx.reply(leaderboard, { parse_mode: 'Markdown' });
});

// /regeln ‚Äì –≤—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º
bot.command('regeln', (ctx) => {
  ctx.reply(RULES_TEXT, { parse_mode: 'Markdown' });
});

// /rules ‚Äì –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–º–µ—Ü–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
bot.command('rules', (ctx) => {
  ctx.reply(RULES_TEXT, { parse_mode: 'Markdown' });
});

// /rulesru ‚Äì –≤—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –Ω–∞ —Ä—É—Å—Å–∫–æ–º
bot.command('rulesru', (ctx) => {
  ctx.reply(RULES_TEXT_RU, { parse_mode: 'Markdown' });
});

// /resetscoreall ‚Äì —Å–±—Ä–æ—Å –≤—Å–µ—Ö –æ—á–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
bot.command('resetscoreall', (ctx) => {
  const chatId = ctx.chat.id;
  pointsData[chatId] = {};
  savePoints();
  ctx.reply("Alle Punkte in dieser Gruppe wurden zur√ºckgesetzt.");
});

// /restartgame ‚Äì –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã (–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
bot.command('restartgame', (ctx) => {
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);

  if (game.autoInterval) {
    clearInterval(game.autoInterval);
    game.autoInterval = null;
  }

  game.roundActive = false;
  game.currentWord = null;
  game.currentParsedGer = null;
  game.firstGuesser = null;
  game.sentenceSubmissions = {};
  game.aufgabeClaimed = {};
  game.wordIndex = 0;

  ctx.reply("–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ (–±–∞–ª–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è). –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /startgame.");
});

////////////////////////////////////////////////////////////
// Verarbeitung von Nachrichten ‚Äì Spiel-Logik
////////////////////////////////////////////////////////////

bot.on('text', (ctx) => {
  const text = ctx.message.text;
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∂–∏
  const cyrillicRegex = /[–∞-—è—ë]/i;
  const emojiRegex = /^[\p{Emoji}\s]+$/u;
  if (cyrillicRegex.test(text) || emojiRegex.test(text)) {
    return;
  }
  
  const chatId = ctx.chat.id;
  const game = ensureGame(chatId);
  if (!game.roundActive) return;

  const userId = ctx.from.id;
  const username = ctx.from.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

  // 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "Aufgabe+"
  if (text.trim() === "Aufgabe+") {
    if (!game.aufgabeClaimed[userId]) {
      updateUserPoints(chatId, userId, username, 3);
      game.aufgabeClaimed[userId] = true;
      ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +3 –±–∞–ª–ª–∞ –∑–∞ Aufgabe+. üî•`);
    }
    return;
  }

  // 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞
  if (!game.firstGuesser) {
    let userGuess = normalize(text);
    if (game.currentParsedGer?.hasArticle) {
      const expected = normalize(`${game.currentParsedGer.article} ${game.currentParsedGer.root}`);
      if (userGuess === expected) {
        game.firstGuesser = { userId, username };
        updateUserPoints(chatId, userId, username, 3);
        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–µ—Ä–≤—ã–π –∏ –ø–æ–ª—É—á–∞–µ—à—å +3 –±–∞–ª–ª–∞.`);
        return;
      } else {
        ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–æ–≤–µ—Ä—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫–ª—å (der, die, das).");
        return;
      }
    } else {
      const expected = normalize(game.currentParsedGer.root);
      if (userGuess === expected) {
        game.firstGuesser = { userId, username };
        updateUserPoints(chatId, userId, username, 3);
        ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–µ—Ä–≤—ã–π –∏ –ø–æ–ª—É—á–∞–µ—à—å +3 –±–∞–ª–ª–∞.`);
        return;
      } else {
        ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ?");
        return;
      }
    }
  } else {
    let userGuess = normalize(text);
    let expected;
    if (game.currentParsedGer?.hasArticle) {
      expected = normalize(`${game.currentParsedGer.article} ${game.currentParsedGer.root}`);
    } else {
      expected = normalize(game.currentParsedGer.root || "");
    }
    if (userGuess === expected) {
      ctx.reply(`–£–≤—ã, ${game.firstGuesser.username} —É–∂–µ —É–≥–∞–¥–∞–ª –ø–µ—Ä–≤—ã–º! üòâ`);
      return;
    }
  }

  // 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤ –∏ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞) => +2 –±–∞–ª–ª–∞
  if (game.sentenceSubmissions[userId]) return;

  const wordsInMessage = text.split(/\s+/).filter(w => w.length > 0);
  if (wordsInMessage.length < 5) {
    ctx.reply("–¢–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏–º—É–º 5 —Å–ª–æ–≤!");
    return;
  }

  const userSentenceLower = text.toLowerCase();
  const rootLower = (game.currentParsedGer?.root || "").toLowerCase();
  if (!userSentenceLower.includes(rootLower)) {
    ctx.reply("–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å–ª–æ–≤–æ?");
    return;
  }

  game.sentenceSubmissions[userId] = true;
  updateUserPoints(chatId, userId, username, 2);
  ctx.reply(`–û—Ç–ª–∏—á–Ω–æ, ${username}! –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +2 –±–∞–ª–ª–∞ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.`);
});

////////////////////////////////////////////////////////////
// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è webhook
////////////////////////////////////////////////////////////

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
async function logWebhookInfo() {
  try {
    const info = await bot.telegram.getWebhookInfo();
    if (info.url) {
      console.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π webhook:", info);
    } else {
      console.log("‚úÖ webhook –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω:", info);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook info:", error);
  }
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ webhook info –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
setInterval(logWebhookInfo, 60 * 1000);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook –≤ —á–∞—Ç–µ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
bot.command('status', async (ctx) => {
  try {
    const info = await bot.telegram.getWebhookInfo();
    await ctx.replyWithMarkdown("–°—Ç–∞—Ç—É—Å webhook:\n```\n" + JSON.stringify(info, null, 2) + "\n```");
  } catch (error) {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ webhook info: " + error.message);
  }
});

////////////////////////////////////////////////////////////
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling-—Ä–µ–∂–∏–º–µ (–¥–ª—è Render Background Worker)
////////////////////////////////////////////////////////////

(async () => {
  try {
    const initialInfo = await bot.telegram.getWebhookInfo();
    console.log("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å webhook:", initialInfo);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ webhook info:", error);
  }

  // –£–¥–∞–ª—è–µ–º webhook, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
  await bot.telegram.deleteWebhook();
  console.log("Webhook —É–¥–∞–ª—ë–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...");

  await bot.launch();
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
